<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wellness Home</title>
    <!-- D3 IMPORT -->
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <!-- from https://www.d3-graph-gallery.com/graph/custom_theme.html -->
    
    <!-- BOOTSTRAP IMPORT -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">

    <!-- FONT IMPORTS -->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Poiret+One&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Antic&family=Julius+Sans+One&family=Poiret+One&display=swap" rel="stylesheet">


</head>
<body>
    <div class = "container">
        <%- include ("./partials/account-options.ejs") %>
        <div class = "intro">
            <h3>WELLNESS TRACKER</h3>
            <%- include ("./partials/full-nav.ejs") %>
        </div>
        <div class = "overview-highlights">
<!-- OVERVIEW -->
            <div class = "overview">
                <h4>OVERVIEW</h4>
                <div class = "inner-overview" >
                    <div class = "graph-overview" id = "emotional-graph">
                        <h6>EMOTIONAL WELLBEING GRAPH</h6>
                    </div>
                    <div class = "graph-overview" id = "physical-graph">
                        <h6>PHYSICAL WELLBEING GRAPH</h6>
                    </div>
                </div>
            </div>
<!-- HIGHLIGHTS -->
            <div class = "highlights">
                <h4>HIGHLIGHTS</h4>
                <table>
                    <thead>
                        <tr>
                            <th>AREA OF STRENGTH</th>
                            <th>AREA OF IMPROVEMENT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td id = "strength"></td>
                            <td id = "improvement"></td>
                        </tr>
                        <tr>
                            <td><button class="btn btn-primary btn-sm"><a class = "table-button" id = "strength-button" href = "#">See Trend</a></button></td>
                            <td><button class="btn btn-primary btn-sm"><a class = "table-button" id = "improvement-button" href = "#">See Trend</a></button></td>
                        </tr>
                    </tbody>
                </table>
                <h6 class = "tip" id = "tip-rand">Tip of the Day: List 5 things you are grateful for.</h6>
            </div>
        </div>
    </div>
</body>
<img src = "https://static.vecteezy.com/system/resources/previews/002/030/935/large_2x/yellow-flowers-on-white-background-free-photo.jpg">
</html>
<style>
    /* GENERAL */
    html {
        background: white;
    }
    body {
        background: white;
        color: #263238;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    h3 {
        padding: 1%;
        margin-bottom: 2%;
        margin-top: 2%;
        font-family: 'Poiret One', cursive;
        text-align: center;
        border-bottom: 1px solid black;
        font-weight: bolder;
    }
    .intro {
        background-image: url("https://www.homestratosphere.com/wp-content/uploads/2018/04/chrysanthemum.jpg");
    }
    /* OVERVIEW */
    .overview-highlights {
        display: inline-flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
    }
    h4 {
        margin: 0;
        margin-top: 2%;
        margin-bottom: 4%;
        padding-top: 2%;
        border-top: 0.7px solid #263238;
        font-family: 'Poiret One', cursive;
        text-align: center;
        width: 100%;
    }
    .overview {
        display: inline-flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
    }
    .inner-overview {
        display: inline-flex;
        flex-direction: row;
        justify-content: center;
    }
    .graph-overview {
        margin: 2%;
        width: 60%;
        display: inline-flex;
        justify-content: center;
        flex-direction: column;
        font-size: 80%;
        font-family: 'Poiret One', cursive;
    }
    svg {
        align-self: center;
    }
    h6 {
        font-family: 'Poiret One', cursive; 
    }
    /* HIGHLIGHTS */
    table {
        width: 100%;
        margin-top: 2%;
        margin-bottom: 2%;
    }
    th, td {
        padding: 1%;
        background: white;
        border: 1px solid black;
        font-family: 'Poiret One', cursive;
        margin: 2%;
        text-align: center;
    }
    button, .btn, .btn-primary, .btn-sm {
        background-color: white;
        border-color: black;
        color: black;
    }
    .btn-primary:hover {
        background-color: #FFD023;
        border-color: black;
    }
    .table-button {
        color: black;
        align-self: center;
        border: 0.5px;
    }
    .tip {
        border: 0.7px solid #263238;
        width: 100%;
        padding: 2%;
        margin-top: 6%;
        text-align: center;
        font-family: 'Poiret One', cursive;
    }
    img {
        width: 100%;
    }
</style>

<!-- EMOTIONAL WELLNESS GRAPH -->
<!-- referenced https://www.d3-graph-gallery.com/intro_d3js.html for breakdown of functionality -->
<script defer>
    // set the dimensions and margins of the graph
    const margin = {top: 10, right: 30, bottom: 40, left: 50},
        width = 300 - margin.left - margin.right,
        height = 200 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const Svg = d3.select("#emotional-graph")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")")

    // Create data
    // referenced https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
    const data = <%- JSON.stringify(emotionalData) %>
    const mindfulness = data.map(d => {
        return {date: new Date(d.date), value: d.practicedMindfulness + .2 * Math.random() - .1, label: "mindfulness"} // consulted someone with experience on formatting of return (specifically, including the label)
    })
    const gratitude = data.map(d => {
        return {date: new Date(d.date), value: d.practicedGratitude + .2 * Math.random() - .1, label: "gratitude"}
    })
    const goals = data.map(d => {
        return {date: new Date(d.date), value: d.reflectedOnGoals + .2 * Math.random() - .1, label: "goals"}
    })

    const allData = mindfulness.concat(gratitude, goals)
    // console.log(allData)
    

    // Add X axis
    // referenced https://stackoverflow.com/questions/48267195/d3-axis-with-dates for x axis domain and https://observablehq.com/@d3/d3-extent to understand .extent
    // referenced https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript to ensure once tick per date on x axis
    const minMax = d3.extent(allData, function(d) {
        return new Date(d.date)
    })
    const minMaxDifference = minMax[1] - minMax[0]
    const rangeMin = minMax[0] - (1000 * 60 * 60 * 24)
    const rangeMax = Number(minMax[1]) + (1000 * 60 * 60 * 24)
    // console.log(rangeMax)
    const minMaxDays = Math.ceil(minMaxDifference / (1000 * 60 * 60 * 24))
    const x = d3.scaleTime()
        .domain([rangeMin, rangeMax])
        .range([0, width])
    Svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x).tickFormat(d3.timeFormat("%m/%d")).ticks(Math.min(Math.max(3,minMaxDays + 1), 10)))
        


    // Add Y axis
    const y = d3.scaleLinear()
        .domain([0, 5])
        .range([height, 0])
    Svg.append("g")
        .call(d3.axisLeft(y).ticks(6))

    // Customization
    Svg.selectAll(".tick line").attr("stroke", "#EBEBEB")

    // Add X axis label:
    Svg.append("text")
        .attr("text-anchor", "end")
        .attr("x", width)
        .attr("y", height + margin.top + 20)
        .text("Date");

    // Y axis label:
    Svg.append("text")
        .attr("text-anchor", "end")
        .attr("transform", "rotate(-90)")
        .attr("y", -margin.left+20)
        .attr("x", -margin.top)
        .text("Wellness Rating")
    const color = d3.scaleOrdinal() 
                .domain(["mindfulness", "gratitude", "goals" ])
                .range([ "#FF9800", "#FDD835", "#696969"])
    // referenced https://www.d3-graph-gallery.com/graph/connectedscatter_basic.html and https://www.d3-graph-gallery.com/graph/connectedscatter_multi.html and https://stackoverflow.com/questions/17407100/how-do-you-draw-linear-line-in-scatter-plot-with-d3-js/39881432 and https://bl.ocks.org/d3noob/38744a17f9c0141bcd04 and more when working on drawing a path. No success with those alone

    // Below code was written by someone w experience coding. As they were coding, I asked questions to understand what they were doing. I wrote those summaries in my own words commented out

    // start of code written by someone else 
    const colorMap = [["mindfulness", "#FF9800"],["gratitude","#FDD835"],["goals","#696969"]] // array[] used to map label and color 
    // Color scale: give me a specie name, I return a color

    colorMap.map(([type, color]) => { 
        const filteredData = _.sortBy(allData, 'date').filter(({label}) => label === type) // this calls lodash to sort the array by date so that the line is drawn sequentially
        const path = d3.path() // defines the d3 element "line" as a path
        // first command in path has to be moveTo
        const {date, value} = _.head(filteredData) // uses lodash method to pull out the first date and value which will be used to tell the line where to begin
        path.moveTo(x(date), y(value)) // moveTo tells the line where to begin

        // from there we draw a bunch of lines using lineTo
        _.tail(filteredData).forEach(({date, value}) => { // loops through each coordinate
            path.lineTo(x(date), y(value)) // draws a line to each coordinate
        })

        // this appends the path element
        Svg.append("path")
           .attr("d", path.toString())
           .attr("stroke", color)
           .attr("fill-opacity", "0") // turns shapes into outlines 
           .attr("stroke-width", 2)
    })
    // end of code written by someone else 

    // Add dots
    Svg.append('g')
        .selectAll("dot")
        .data(allData)
        .enter()
        .append("circle")
        .attr("cx", function (d) { return x(d.date); } )
        .attr("cy", function (d) { return y(d.value); } )
        .attr("r", 5)
        .style("fill", function (d) { return color(d.label) } )

</script>


<!-- PHYSICAL WELLNESS GRAPH -->
<!-- referenced https://www.d3-graph-gallery.com/intro_d3js.html for breakdown of functionality -->
<script defer>
    // set the dimensions and margins of the graph

    // append the svg object to the body of the page
    const Svg2 = d3.select("#physical-graph")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")")

    // Create data
    // referenced https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
    const data2 = <%- JSON.stringify(physicalData) %>
    const moved = data2.map(d => {
        return {date: new Date(d.date), value: d.movedBody + .2 * Math.random() - .1, label: "moved"} // consulted someone with experience on formatting of return (specifically, including the label)
    })
    const sleep = data2.map(d => {
        return {date: new Date(d.date), value: d.gotEnoughSleep + .2 * Math.random() - .1, label: "sleep"}
    })
    const rest = data2.map(d => {
        return {date: new Date(d.date), value: d.restedBody + .2 * Math.random() - .1, label: "rest"}
    })

    const allData2 = moved.concat(sleep, rest)
    // console.log(allData2)
    

    // Add X axis
    // referenced https://stackoverflow.com/questions/48267195/d3-axis-with-dates for x axis domain and https://observablehq.com/@d3/d3-extent to understand .extent
    // referenced https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript to ensure once tick per date on x axis
    const minMax2 = d3.extent(allData2, function(d) {
        return new Date(d.date)
    })
    const minMaxDifference2 = minMax2[1] - minMax2[0]
    const rangeMin2 = minMax2[0] - (1000 * 60 * 60 * 24)
    const rangeMax2 = Number(minMax2[1]) + (1000 * 60 * 60 * 24)
    // console.log(rangeMax)
    const minMaxDays2 = Math.ceil(minMaxDifference2 / (1000 * 60 * 60 * 24))
    const x2 = d3.scaleTime()
        .domain([rangeMin2, rangeMax2])
        .range([0, width])
    Svg2.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x2).tickFormat(d3.timeFormat("%m/%d")).ticks(Math.min(Math.max(3,minMaxDays2 + 1), 10)))
        


    // Add Y axis
    const y2 = d3.scaleLinear()
        .domain([0, 5])
        .range([height, 0])
    Svg2.append("g")
        .call(d3.axisLeft(y2).ticks(6))

    // Customization
    Svg2.selectAll(".tick line").attr("stroke", "#EBEBEB")

    // Add X axis label:
    Svg2.append("text")
        .attr("text-anchor", "end")
        .attr("x", width)
        .attr("y", height + margin.top + 20)
        .text("Date");

    // Y axis label:
    Svg2.append("text")
        .attr("text-anchor", "end")
        .attr("transform", "rotate(-90)")
        .attr("y", -margin.left+20)
        .attr("x", -margin.top)
        .text("Wellness Rating")
    const color2 = d3.scaleOrdinal() 
                .domain(["moved", "sleep", "rest" ])
                .range([ "#FF9800", "#FDD835", "#696969"])
    // referenced https://www.d3-graph-gallery.com/graph/connectedscatter_basic.html and https://www.d3-graph-gallery.com/graph/connectedscatter_multi.html and https://stackoverflow.com/questions/17407100/how-do-you-draw-linear-line-in-scatter-plot-with-d3-js/39881432 and https://bl.ocks.org/d3noob/38744a17f9c0141bcd04 and more when working on drawing a path. No success with those alone

    // Below code was written by someone w experience coding. As they were coding, I asked questions to understand what they were doing. I wrote those summaries in my own words commented out

    // start of code written by someone else 
    const colorMap2 = [["moved", "#FF9800"],["sleep","#FDD835"],["rest","#696969"]] // array[] used to map label and color 
    // Color scale: give me a specie name, I return a color

    colorMap2.map(([type, color]) => { 
        const filteredData2 = _.sortBy(allData2, 'date').filter(({label}) => label === type) // this calls lodash to sort the array by date so that the line is drawn sequentially
        const path2 = d3.path() // defines the d3 element "line" as a path
        // first command in path has to be moveTo
        const {date, value} = _.head(filteredData2) // uses lodash method to pull out the first date and value which will be used to tell the line where to begin
        path2.moveTo(x2(date), y2(value)) // moveTo tells the line where to begin

        // from there we draw a bunch of lines using lineTo
        _.tail(filteredData2).forEach(({date, value}) => { // loops through each coordinate
            path2.lineTo(x2(date), y2(value)) // draws a line to each coordinate
        })

        // this appends the path element
        Svg2.append("path")
           .attr("d", path2.toString())
           .attr("stroke", color)
           .attr("fill-opacity", "0") // turns shapes into outlines 
           .attr("stroke-width", 2)
    })
    // end of code written by someone else 

    // Add dots
    Svg2.append('g')
        .selectAll("dot")
        .data(allData2)
        .enter()
        .append("circle")
        .attr("cx", function (d) { return x2(d.date); } )
        .attr("cy", function (d) { return y2(d.value); } )
        .attr("r", 5)
        .style("fill", function (d) { return color(d.label) } )
</script>

<!-- HIGHLIGHTS JS -->
<script>
    // === DISPLAY AREA OF STRENGTH AND IMPROVEMENT === //
    const emotionalData = <%- JSON.stringify(emotionalData) %>
    const physicalData = <%- JSON.stringify(physicalData) %>
    const nutritionalData = <%- JSON.stringify(nutritionalData) %>
    const socialData = <%- JSON.stringify(socialData) %>
    const username = <%- JSON.stringify(username) %>

    const emotionalAvg = () => { 
        let avg = 0
        emotionalData.forEach(log => {
            avg = avg + log.practicedMindfulness + log.practicedGratitude + log.reflectedOnGoals
        })
        avg = avg / (emotionalData.length * 3)
        return avg
    }

    const physicalAvg = () => { 
        let avg = 0
        physicalData.forEach(log => {
            avg = avg + log.movedBody + log.gotEnoughSleep + log.restedBody
        })
        avg = avg / (physicalData.length * 3)
        return avg
    }

    const nutritionalAvg = () => { 
        let avg = 0
        nutritionalData.forEach(log => {
            avg = avg + log.listenedToBody + log.ateVeggies + log.drankWater
        })
        avg = avg / (nutritionalData.length * 3)
        return avg
    }

    const socialAvg = () => { 
        let avg = 0
        socialData.forEach(log => {
            avg = avg + log.connectedWithSomeone + log.sharedFeelings + log.madeTimeForMyself
        })
        avg = avg / (socialData.length * 3)
        return avg
    }

    const averages = [emotionalAvg(), physicalAvg(), nutritionalAvg(), socialAvg()]

    const appendMax = () => {
        let indexOfMax = averages.indexOf(Math.max(...averages))
        let cell = document.getElementById("strength")
        let link = document.getElementById("strength-button")
        if (indexOfMax === 0) {
            cell.innerText = "Emotional Wellness"
            link.href = "/wellness/emotionaltrend"
        } else if (indexOfMax === 1) {
            cell.innerText = "Physical Wellness"
            link.href = "/wellness/physicaltrend"
        } else if (indexOfMax === 2) {
            cell.innerText = "Nutritional Wellness"
            link.href = "/wellness/nutritionaltrend"
        } else {
            cell.innerText = "Social Wellness"
            link.href = "/wellness/socialtrend"
        }
    }

    const appendMin = () => {
        let indexOfMin = averages.indexOf(Math.min(...averages))
        let cell = document.getElementById("improvement")
        let link = document.getElementById("improvement-button")
        if (indexOfMin === 0) {
            cell.innerText = "Emotional Wellness"
            link.href = "/wellness/emotionaltrend"
        } else if (indexOfMin === 1) {
            cell.innerText = "Physical Wellness"
            link.href = "/wellness/physicaltrend"
        } else if (indexOfMin === 2) {
            cell.innerText = "Nutritional Wellness"
            link.href = "/wellness/nutritionaltrend"
        } else {
            cell.innerText = "Social Wellness"
            link.href = "/wellness/socialtrend"
        }
    }

    appendMin()
    appendMax()

    // === DISPLAY RANDOM TIP === //
    // referenced https://www.everydayhealth.com/emotional-health/10-ways-to-boost-emotional-health.aspx and https://www.rivermendhealth.com/resources/10-tips-for-emotional-well-being-heart-health/ for tips
    const tipBox = document.getElementById("tip-rand")

    let tips = ["List 5 things you are grateful for.", "Get Moving to Improve Mood and Lessen Anxiety.", "Develop a Passion by Investing Time in a New Hobby.", "Meditate or Practice Yoga to Relieve Stress.", "Manage Your Time by Setting Weekly Goals.", "Say 'no' when you need to. Only take on as much as you can handle.", "List 5 things you love about yourself.", "When you feel angry, take time and space for yourself. Then, confront your anger.", "Eat lots of leafy greens.", "Lean on friends and family for support."]
    const setTip = () => {
        tipBox.innerText = `Tip of the Day: ${tips[Math.floor(Math.random()*tips.length)]}`
    }
    
    setTip()

</script>